<launch>
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="x_pos" default="8.0"/>
  <arg name="y_pos" default="8.0"/>
  <arg name="z_pos" default="0.0"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find warehouse_automation)/worlds/warehouse.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find kana_simulation)/urdf/robot_simulation.urdf.xacro" />

  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model turtlebot3 -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />

      <node name="rviz" pkg="rviz" type="rviz" args="-d $(find kana_simulation)/include/rviz.rviz" />
    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen" >
        <!-- <remap from="/joint_states" to="/kana/joint_states" />  -->
    </node>

    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
        args="joint_state_controller
              front_left_wheel_joint_effort_controller
              front_right_wheel_joint_effort_controller
              rear_left_wheel_joint_effort_controller
              rear_right_wheel_joint_effort_controller" />

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
        <!-- <remap from="/joint_states" to="/kana/joint_states" /> -->
    </node>

    <!-- <node pkg="gmapping" type="slam_gmapping" name="gmapping">
        <param name="base_frame" value="base_link" />
        <param name="odom_frame" value="odom" />
        <param name="delta" value="0.1" />
    </node> -->

    <node pkg="move_base" type="move_base" name="move_base" respawn="false" output="screen">
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
        <rosparam file="$(find warehouse_automation)/config/costmap_common_params.yaml" command="load" ns="global_costmap"/>
        <rosparam file="$(find warehouse_automation)/config/costmap_common_params.yaml" command="load" ns="local_costmap"/>
        <rosparam file="$(find warehouse_automation)/config/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find warehouse_automation)/config/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find warehouse_automation)/config/move_base_params.yaml" command="load" />
        <rosparam file="$(find warehouse_automation)/config/dwa_local_planner.yaml" command="load" />
    </node>

    <include file="$(find warehouse_automation)/launch/amcl.launch">
        <arg name="initial_pose_x" value="$(arg x_pos)"/>
        <arg name="initial_pose_y" value="$(arg y_pos)"/>
    </include>

    <arg name="map_file" default="$(find warehouse_automation)/maps/warehouse.pgm" />
    <node name="map_server" pkg="map_server" type="map_server" args="$(find warehouse_automation)/maps/warehouse.yaml" />
    <node name="navigation" pkg="warehouse_automation" type="warehouse_navigation.py" args="$(find warehouse_automation)/maps/warehouse.yaml" output="screen"/>
</launch>
